#!/usr/bin/python

import re
import os
import sys

# Regex for cherry pick annotations
_cherry_re = re.compile(r'^\((?:cherry[- ]?picked|back[- ]?ported) '
                       r'from commit [0-9a-f]{40}\)$')
# Regex for trailing comments
_comment_re = re.compile(r'^((\s*)|(#.*))?$')

_empty_re = re.compile(r'^\s*$')

# RT headers
_rtheader_re = re.compile(r'^(RT-)?([\w_-]+):\s*(.*)', re.IGNORECASE)

# Separated by blank lines:
#
# body, meta (cherry-pick and other annotations),
# RT "headers" (really trailers)
class _Commitmsg(object):
    def __init__(self, msg_in):
        msg = list(msg_in)
        comments = []
        while msg and _comment_re.match(msg[-1]):
            comments.insert(0, msg.pop())

        # Trim trailing and leading empty lines from comments
        while comments and _empty_re.match(comments[-1]):
            del comments[-1]
        while comments and _empty_re.match(comments[0]):
            del comments[0]

        cherry = []
        while msg and _cherry_re.match(msg[-1]):
            cherry.insert(0, msg.pop())
        while msg and _empty_re.match(msg[-1]):
            del msg[-1]

        rtheaders = []
        while msg and _rtheader_re.match(msg[-1]):
            rtheaders.insert(0, msg.pop())

        body = []
        for line in msg[::-1]:
            if _cherry_re.match(line):
                cherry.insert(0, line)
            else:
                body.insert(0, line)

        # Trim trailing empty lines from body
        while body and _empty_re.match(body[-1]):
            del body[-1]

        self.body = body
        self.comments = comments
        self.rtheaders = rtheaders
        self.cherry = cherry

    def normalized(self):
        """Normalized list of commit message lines"""
        lines = list(self.body)
        if self.cherry:
            lines += [''] + self.cherry
        if self.rtheaders:
            lines += [''] + self.rtheaders
        if self.comments:
            lines += [''] + self.comments
        return lines


# The tedious I/O bits are here in the public class
class Commitmsg(_Commitmsg):
    def __init__(self, msg_in, f=None):
        if f is not None:
            self.f = f
        return super(Commitmsg, self).__init__(msg_in)

    @classmethod
    def fromfile(cls, f):
        """"Read commit message from an open file"""
        lines = f.read().splitlines()
        return cls(lines, f=f)

    @classmethod
    def fromfilename(cls, fn):
        """"Read commit message from a named file"""
        f = open(fn, 'r+')
        r = cls.fromfile(f)
        return r

    def tofile(self, f=None):
        """Write normalized commit message to an open file

        This replaces the current file contents.
        """
        if f is None:
            f = self.f
        f.seek(0)
        f.truncate()
        s = '\n'.join(self.normalized()) + '\n'
        f.write(s)


# New-style "ticket: NNNN (new)"
ticketnew_re = re.compile(r'^((?:RT-)?ticket:\s*[0-9]+)\s*(?:\(new\)\s*)?$',
                          re.IGNORECASE)

def edit_rtheaders(msg):
    newcomments = ['# ' + h for h in msg.rtheaders]
    rtheaders_new = []
    version_fixed = os.environ.get('KRB5_VERSION_FIXED')

    for h in msg.rtheaders:
        m = ticketnew_re.match(h)
        if not m:
            if version_fixed:
                # Delete RT headers that aren't "ticket:"
                continue
            else:
                rtheaders_new.append(h)
        else:
            # Delete "(new)" from new-ticket header
            rtheaders_new.append(m.expand(r'\1'))
            if version_fixed:
                rtheaders_new.append("version_fixed: %s" % version_fixed)

    if newcomments:
        newcomments = ['# previous RT headers:', '#'] + newcomments + ['#']

    if msg.comments:
        msg.comments = newcomments + msg.comments

    msg.rtheaders = rtheaders_new

fname = sys.argv[1]

msg = Commitmsg.fromfilename(fname)

if msg.cherry:
    edit_rtheaders(msg)

msg.tofile()
